Menu="Main:4"
Title="Unassigned Devices"
Tag="unlink"
---
<?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2024, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

/* Load the UD library file if it is not already loaded. */
require_once("plugins/unassigned.devices/include/lib.php");

/* See if NFS and SMB sharing is enabled. */
$disabled = (($var['shareNFSEnabled'] == "no") && ($var['shareSMBEnabled'] == "no")) ? "disabled" : "";

/* If user0 exists, then a user- root share is available. */
$isUser0	= is_dir("/mnt/user0/");
?>

<link rel="stylesheet" href="<?autov('/webGui/styles/jquery.ui.css')?>">
<link rel="stylesheet" href="<?autov("/plugins/dynamix.docker.manager/styles/style-$theme.css")?>">
<link rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">
<link rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>">

<link rel="stylesheet" href="<?autov("/plugins/".UNASSIGNED_PLUGIN."/assets/style-$theme.css")?>">
<link rel="stylesheet" href="<?autov("/plugins/".UNASSIGNED_PLUGIN."/assets/unassigned.css")?>">

<script src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<script src="<?autov('/webGui/javascript/jquery.filetree.js')?>"></script>

<script src="<?autov('/plugins/'.UNASSIGNED_PLUGIN.'/assets/arrive.min.js')?>"></script>

<style>
<?if ($themes1):?>
	div.title.ud{margin-top:-45px}
	div#title.ud{margin-top:-45px}
<?else:?>
	div.title.ud{margin-top:0}
	div#title.ud{margin-top:0}
<?endif;?>
</style>

<?=$Preclear ? $Preclear->html() : "";?>

<div class='pluginUpdate'></div>

<div class='title ud'>
<span class='left'>_(Unassigned Disks)_/_(Remote Shares)_/_(Historical Unassigned Devices)_</span>
<span class='right ud'><a class='tooltip' title="_(Unassigned Devices Settings)_" href="/Settings/UnassignedDevicesSettings"><i class="fa fa-gear"></i></a></span>
<span class='right ud'><a class='tooltip' title="_(Refresh Disks and Configuration)_" onclick="rescan_disks()"><i class="fa fa-refresh"></i></a></span>
<span class='right ud'><a class='tooltip' title="_(Show/Hide Historical Unassigned Devices)_"></a><input type="checkbox" class="historical-switch"></span>
<span class='right ud'><a class='tooltip' title="_(Show/Hide SMB/NFS/ISO Shares)_"></a><input type="checkbox" class="shares-switch"></span>
<span class='right ud'><a class='tooltip' title="_(Show/Hide Unassiged Disk Devices)_"></a><input type="checkbox" class="disks-switch"></span>
</div>

<div class='show-disks'>
	<div class='title shift'>
		<span class='left'><img src='/plugins/<?=UNASSIGNED_PLUGIN;?>/icons/disk.png' class='icon'><?=_('Unassigned Disk Devices')?></span>
	</div>

	<table id='usb_devices_list' class='usb_mounts'>
		<thead>
			<tr>
				<td><?=('Device')?></td>
				<td><?=('Identification')?></td>
				<td></td>
				<td><?=_('Temp')?>.</td>
				<td><?=_('Reads')?></td>
				<td><?=_('Writes')?></td>
				<td><?=_('Settings')?></td>
				<td><?=_('FS')?></td>
				<td><?=_('Size')?></td>
				<td><?=_('Used')?></td>
				<td><?=_('Free')?></td>
			</tr>
		</thead>
		<tbody id="disk-table-body">
			<tr>
				<td colspan='11'><div class='spinner'></div></td>
			</tr>
		</tbody>
	</table>
	<div class='show-shares'>
		<br><br>
	</div>
</div>

:unassgned_devices_switches_plug:
> Turn on the **Disks** switch to change the web page to show disk devices. Turn off the **Disks** switch to change the web page to hide disk devices.
>
> Turn on the **Shares** switch to change the web page to show shares. Turn off the **Shares** switch to change the web page to hide shares.
>
> Turn on the **Historical** switch to show Historical disk devices. Turn off **Historical** switch to switch back to not show Historical disk devices.
>
> Click on the <i class="fa fa-refresh"></i> icon to refresh disks and configuration.
>
> Click on the <i class="fa fa-gear"></i> icon to go to the UD Settings.
>
> You can spin a disk up or down by clicking on the disk ball <i class='fa fa-circle orb green-orb'></i>or <i class='fa fa-circle orb grey-orb'></i>indicator.  Applies to version 6.9 RC2 and later only.
>
> Click on the <i class="fa fa-gears"></i> icon to go to the Device Settings configuration.  This is where you configure a device script and certain device characteristics.
> 
> Click on the <i class="icon-nvme"></i> or <i class="fa fa-hdd-o"></i> icon to display syslog entries specific to this disk device.
>
> **Mount Point icons:**
>
> When the <i class='fa fa-pencil'></i> icon shows next to the mount point it indicates the mount point can be changed when the mount point is clicked.
>
> When the <i class='fa fa-external-link'></i> icon shows next to the mount point it indicates the clicking on the mount point will browse the files on that partition.
>
> Click on the <i class="fa fa-align-left"></i> icon to display the device script log.  This is the log specific to the device script.
>
> Click on the <i class="fa fa-check"></i> icon to perform a file system check.  BTRFS and ZFS file systems need to be mounted to do a file check.  The file check on BTRFS and ZFS file systems is a scrub.
>
> Click on the <i class="fa fa-flash"></i> icon to run your device script as if it was hot plugged.  This only applies to disk devices.
:end

<div class='show-shares'>
	<div class='title shift'>
		<span class='left'><img src='/plugins/<?=UNASSIGNED_PLUGIN;?>/icons/smbsettings.png' class='icon'><?=_('SMB Shares')?>&nbsp;|&nbsp;<img src='/plugins/<?=UNASSIGNED_PLUGIN?>/icons/nfssettings.png' class='icon'><?=_('NFS Shares')?>&nbsp;|&nbsp;<img src='/plugins/<?=UNASSIGNED_PLUGIN?>/icons/iso.png' class='icon' style='width:16px;'><?=_('ISO File Shares')?></span>
	</div>

	<table class='samba_mounts'>
		<thead>
		<tr>
			<td><?=_('Share Type')?></td>
			<td><?=_('Source')?></td>
			<td><?=_('Mount Point')?></td>
			<td></td>
			<td><?=_('Remove')?></td>
			<td></td>
			<td><?=_('Settings')?></td>
			<td></td>
			<td><?=_('Size')?></td>
			<td><?=_('Used')?></td>
			<td><?=_('Free')?></td>
		</tr>
		</thead>
		<tbody id="remotes-table-body">
			<tr>
				<td colspan='11'><div class='spinner'></div></td>
			</tr>
		</tbody>
	</table>
	<div id='remotes-buttons'>
		<button onclick='add_samba_share()' <?=$disabled?>><?=_('Add Remote SMB')?>/<?=_('NFS Share')?></button>
		<button onclick='add_iso_share()'><?=_('Add ISO File Share')?></button>
		<button onclick='add_root_share()'><?=_('Add Root Share')?></button>
	</div>
</div>

<div class='show-disks'>
	<div class='show-historical'>
		<br><br>
		<div class='title shift'>
			<span class='left'><img src='/plugins/<?=UNASSIGNED_PLUGIN;?>/icons/historical.png' class='icon'><?=_('Historical Unassigned Devices')?></span>
		</div>

		<table class='usb_absent'>
			<thead>
			<tr>
				<td><?=_('Device')?></td>
				<td><?=_('Serial Number (Mount Point)')?></td>
				<td></td>
				<td></td>
				<td><?=_('Remove')?></td>
				<td><?=_('Settings')?></td>
				<td></td>
				<td></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
			</thead>
			<tbody id="historical-table-body">
			</tbody>
		</table>
	</div>
</div>

:unassigned_devices_general_help_plug:
> **Unassigned Devices is called UD for short.**
>
> Hover your mouse over an any active area on the UD page and a tool tip will show you what clicking that area does.
> You can mount USB devices, sata drives, Remote SMB/NFS shares, and ISO Files with UD.  Any devices with the auto mount switch on will be mounted when the array is started.  All drives and SMB/NFS Mounts are unmounted when the array is stopped on the 'stopping_svcs' event.
> If you want to share your drive, you can turn on the Share switch.  The default for Remote SMB shares is Public read/write access.  Enable SMB Security by user in the Unassigned Devices Settings.  NFS shares are exported and access is read/write.  The export of NFS devices is enabled in the Unassigned Devices settings. You can also enable a common script that will be executed on every disk mount.  In order to share any UD device, sharing needs to be enabled in the UD Settings and the switch turned on to share the particular device.  SMB/NFS remove shares and ISO mounts are always shared.
> After entering a mount point, press &lt;Enter&gt; to save the change.
>
> Additional options are available when you click on the <i style='color:black;font-weight:bold;' class="fa fa-plus-square"></i> icon by device identification.  When the disk is unmounted, the mount point of the device can be changed.  The disk label will also be changed.  A disk can be formatted and an fsck run to check the disk.
>
> The 'Settings->Unassigned Devices' security settings for SMB and NFS must be set correctly for SMB and NFS sharing to work properly.
>
> If the mount button is grayed out for a SMB/NFS remote share, the remote server is not responding to a ping.  The remote share server must respond to a ping or UD will consider it off-line.
>
> The 'Add Root Share' button is disabled when 'Enable disk shares' is enabled and any Root Shares previously added will not mount.
>
> UD has a destructive mode that allows deleting disk partitions and formatting disks.	If Destructive Mode is not turned on in the UD Settings, you WILL NOT be able to format a disk or remove partitions.  Go the the 'Settings->Unassigned Devices' to set the destructive mode.
>
> **To format a disk:**
>
> + Destructive mode must be enabled.
> + Disk must have all partitions removed.  Unmount disk, click on the <i style='color:black;font-weight:bold;' class='fa fa-plus-square'></i> icon,, and click on all <i style='color:red;font-weight:bold;' class='fa fa-remove hdd'></i> icons to delete partitions.
> + If the disk has been precelared and shows a grayed 'Format' button, click on the <i style='color:black;font-weight:bold;' class='fa fa-plus-square'></i> icon, then click on the <i style='color:red;font-weight:bold;' class='fa fa-remove hdd'></i> icon to delete the preclear status file.
>
> **Note: A disk partitioned in UD is compatible with the array disk partitioning and can be added to the array.  Supported file formats are XFS, XFS encrypted, BTRFS, BTRFS encrypted, ZFS and ZFS encrypted.**
>
> **Encrypted Disks:**
>
> + Any disk formatted in UD that is encrypted will use the array password/passphrase and can be incorporated into the array.  Or you can set a unique password when it is formatted.  If you set a password on the disk when it is formatted, you will need to enter a disk password in Unassignd Devices->Settings for that disk.
> + Any disk that was not encrypted with the Array password/passphrase can be mounted by setting a per disk passord set in Unassigned Devices->Settings.
>
> **Unassigned devices script:**
>
> UD includes a script that is used for mounting and unmounting devices and SMB/NFS mounts. These scripts can be used from the command line or in your scripts as necessary.
>
> + '/usr/local/sbin/rc.unassigned mount autodevices' - all devices set to auto mount will be mounted.
> + '/usr/local/sbin/rc.unassigned mount autoshares' - all SMB/NFS mounts set to auto mount will be mounted.
> + '/usr/local/sbin/rc.unassigned umount auto' - all devices and SMB/NFS mounts set to auto mount will be unmounted.
> + '/usr/local/sbin/rc.unassigned umount all' - all devices and SMB/NFS mounts are unmounted in preparation for shutting down the array.
> + '/usr/local/sbin/rc.unassigned mount /dev/sdX or devX' - mount disk device.
> + '/usr/local/sbin/rc.unassigned mount name=diskname' - mount disk device by disk name.
> + '/usr/local/sbin/rc.unassigned umount /dev/sdX or devX' - unmount disk device. You can use this command in a UD script to unmount the device when the script has completed.
> + '/usr/local/sbin/rc.unassigned umount name=diskname' - unmount device by disk name.
> + '/usr/local/sbin/rc.unassigned spindown /dev/sdX or devX' - spin down disk device.
> + '/usr/local/sbin/rc.unassigned spindown name=diskname' - spin down a disk by disk name.
> + '/usr/local/sbin/rc.unassigned detach /dev/sdX or devX' - detach a USB disk device. You can use this command in a UD script to detach the device when the script has completed.
> + '/usr/local/sbin/rc.unassigned detach name=diskname' - detach a USB disk device by it's name. You can use this command in a User script to detach the device when the script has completed.
> + '/usr/local/sbin/rc.unassigned attach serial - attach a disk device. You can use this command in a script to attach a device.  The 'diskname' is not available when the disk is detached.
> + '/usr/local/sbin/rc.unassigned mount source' - where source is the SMB/NFS source.
> + '/usr/local/sbin/rc.unassigned umount source' - where source is the SMB/NFS source.
>
> Note: /dev/sdX where 'X' is the device designator.  The devX is the device name in the UD page.  If the device name is 'Dev 1', then use dev1 as the device to spin down.  Using the name=diskname is useful if you have a User Script needing to perform UD operations on a disk.
>
> Be careful using the /dev/sdX or devX designation because they can change after a reboot.  It's best to use the values passed into the UD script for sdX (DEVICE) and devX (UD_DEVICE).
:end

<script>
	/* Initialize PHP variables passed to JavaScript */
	const pluginPath = <?= json_encode(UNASSIGNED_PLUGIN ?? 'unassigned.devices.preclear'); ?>;

	/* Display information from PHP on the client side. */
	const display = <?=json_encode($display);?>;

	/* Array to store network information. */
	let network = [];

	/* Number of tabs with names ending in 'usbdisks'. */
	const tab_usbdisks = $('input[name$="tabs"]').length;

	/* URL for Unassigned Devices PHP file. */
	const UDURL = "<?=UD_URL;?>";

	/* Page refresh timer. */
	let refreshTimer;

	/* Flag to track whether page is currently being refreshed. */
	let isRefreshing = false;

	/* Page refresh rate is 3 seconds. */
	const REFRESH_INTERVAL = 3000;

	/* Ping poll interval is 15 seconds. */
	const PING_INTERVAL = 15000;

	/* Global Constants */
	const translations = {
		mounting: <?= json_encode(_('Mounting')); ?>,
		unmounting: <?= json_encode(_('Unmounting')); ?>,
		searching: <?= json_encode(_('Searching')); ?>,
		loading: <?= json_encode(_('Loading')); ?>,
		fail: <?= json_encode(_('Fail')); ?>,
		success: <?= json_encode(_('Success')); ?>,
		checkSyslog: <?= json_encode(_('Check the syslog for details')); ?>,
		timedOut: <?= json_encode(_('Failed to get unassigned devices information - check the syslog')); ?>,
	};

	/* Spinner HTML */
	const spinnerHTML = "<i class='fa fa-spinner fa-spin orb'></i>";

	/* Function to initiate spinning down a disk */
	function spinDownDisk(device) {
		$(`#disk_orb-${device}`).attr('class', "fa fa-refresh fa-spin green-orb orb");
		$.post(UDURL, { action: 'spin_down_disk', device });
	}

	/* Function to initiate spinning up a disk */
	function spinUpDisk(device) {
		$(`#disk_orb-${device}`).attr('class', "fa fa-refresh fa-spin grey-orb orb");
		$.post(UDURL, { action: 'spin_up_disk', device });
	}

	/* Function to perform a disk operation (mount/unmount) */
	async function diskOperation(triggerElement, operation, device) {
		const mountButton = $(`button[device='${device}']`);

		/* Clear refresh timer */
		window.clearInterval(refreshTimer);

		/* Add spinner to button and disable it */
		mountButton.prop("disabled", true).html(spinnerHTML + (operation === "mount" ? translations.mounting : translations.unmounting));

		/* Ensure the refreshPage is not in progress */
		if (isRefreshing) {
			await refreshPage().catch(() => {
				/* Ignore errors and continue */
			});
		}

		/* Refresh button content before initiating the request */
		mountButton.prop("disabled", true).html(spinnerHTML + (operation === "mount" ? translations.mounting : translations.unmounting));

		/* Perform the mount/unmount operation */
		await mountPostRequest(operation, device);

		/* Restart the refresh timer */
		refreshTimer = window.setInterval(refreshPage, REFRESH_INTERVAL);
	}

	/* Function to send mount/unmount request */
	async function mountPostRequest(operation, device) {
		/* Start a delayed refresh in case the server responds slowly */
		window.setTimeout(refreshPage, 100);

		$.post(UDURL, { action: operation, device })
			.done((data) => {
				if (data === "false") {
					showMountUnmountAlert(device, operation);
				}
			})
			.fail(() => {
				showResultAlert(false);
			})
			.always(() => {
				/* Ensure the refresh timer is started */
				window.setTimeout(refreshPage, 100);
			});
	}

	/* Function to refresh page content */
	async function refreshPage() {
		if (isRefreshing) return;

		isRefreshing = true;

		const timeoutPromise = new Promise((_, reject) => {
			setTimeout(() => reject(new Error("<tr><td colspan='11' style='text-align:center;'>" + "Timeout: " + translations.timedOut)), 30000);
		});

		try {
			const data = await Promise.race([
				$.post(UDURL, { action: 'get_content', display }, null, 'json'),
				timeoutPromise,
			]);

			updateTableContent(data);
		} catch (error) {
			$('#disk-table-body, #remotes-table-body, #historical-table-body').html(error.message);
		} finally {
			isRefreshing = false;
		}
	}

	/* Update table content */
	function updateTableContent(data) {
		const toggledRows = $("tr.toggle-parts:visible").map(function () {
			return $(this).attr("name");
		}).get();

		$('#disk-table-body').html(data.disks);
		$('#remotes-table-body').html(data.remotes);
		$('#historical-table-body').html(data.historical);

		toggledRows.forEach((rowName) => {
			$(`tr[name='${rowName}']`).css("display", "table-row");
		});
	}

	/* Function to poll remote servers and update ping status */
	function pingPoll() {
		$.post(UDURL, { action: 'update_ping' });
	}

	/* Function to handle surveys for unassigned devices */
	function doUnassignedDevicesSurvey(surveyName, surveyOption) {
		/* Get the survey element by name */
		const survey = $(`div[data-survey-name="${surveyName}"]`);

		/* Initialize variables */
		const numQuestions = survey.find("div[data-question]").length;
		let surveyData = [];
		let index = 0;

		/**
		 * Evaluate a condition based on the provided selector.
		 * @param {Object} obj - The jQuery object containing the condition.
		 * @param {string} selector - The selector to evaluate.
		 * @returns {boolean|null} - The evaluated condition or null.
		 */
		const evalCondition = (obj, selector) => {
			const conditionElement = obj.find(selector).eq(0);
			if (conditionElement.length) {
				try {
					return eval($.trim(conditionElement.text()));
				} catch {
					return null;
				}
			}
			return null;
		};

		/**
		 * Get an attribute from an object with a default fallback.
		 * @param {Object} obj - The jQuery object.
		 * @param {string} name - The attribute name.
		 * @param {*} defaultValue - The fallback value if the attribute is missing.
		 * @returns {*} - The attribute value or the default value.
		 */
		const getAttr = (obj, name, defaultValue) => obj.attr(name) ?? defaultValue;

		/**
		 * Display a SweetAlert dialog for the survey.
		 * @param {string} direction - Navigation direction ('>' or '<').
		 */
		const showSwal = (direction = "=") => {
			if (direction === ">") index++;
			if (direction === "<") index--;

			/* Stop if index is out of bounds */
			if (index >= numQuestions) return false;

			/* Get the current question and its condition */
			const question = survey.find("div[data-question]").eq(index);
			const condition = question.find("div[data-question-condition]").eq(0);

			/* Skip question if the condition is not met */
			if (condition.length && !evalCondition(question, "div[data-question-condition]")) {
				showSwal(direction);
				return;
			}

			/* Retrieve and format question content */
			let content = question.find("div[data-question-content]").html();
			const format = question.find("div[data-question-format]");
			if (format.length) {
				try {
					const formatOpts = eval($.trim(format.text()));
					content = content.formatUnicorn(formatOpts);
				} catch {
					/* Ignore formatting errors */
				}
			}

			/* Restore previously entered data in inputs */
			const restoredContent = $("<div></div>").html(content);
			restoredContent.find(":input").each(function () {
				const input = $(this);
				const name = input.prop("name");

				if (name in surveyData) {
					if (["checkbox", "radio", "option"].includes(input.prop("type"))) {
						if (input.val() === surveyData[name]) input.prop("checked", true);
					} else if (input.prop("type") === "select-one") {
						input.find(`option[value="${surveyData[name]}"]`).prop("selected", true);
					} else {
						input.val(surveyData[name]);
					}
				}
			});
			content = restoredContent[0].outerHTML;

			/* Define SweetAlert button options */
			const buttons = {
				back: getAttr(question, "data-question-button-back", "<?=_('Back')?>"),
				next: getAttr(question, "data-question-button-next", "<?=_('Next')?>"),
				done: getAttr(question, "data-question-button-done", "<?=_('Done')?>"),
				cancel: getAttr(question, "data-question-button-cancel", "<?=_('Cancel')?>"),
			};

			/* Define SweetAlert configuration */
			const swalOpts = {
				title: question.attr("data-question-title"),
				content: { element: "div", attributes: { innerHTML: content } },
				icon: getAttr(question, "data-question-icon", "info"),
				closeOnClickOutside: false,
				buttons: {
					next: {
						text: index === numQuestions - 1 ? buttons.done : buttons.next,
						value: true,
						visible: true,
						closeModal: false,
					},
					cancel: {
						text: index > 0 ? buttons.back : buttons.cancel,
						value: index > 0 ? false : null,
						visible: true,
						closeModal: index === 0,
					},
				},
			};

			/* Display SweetAlert and handle responses */
			swal2(swalOpts).then((response) => {
				/* Save user inputs */
				$(".swal-modal")
					.find(":input")
					.each(function () {
						const input = $(this);
						const name = input.prop("name");

						if (input.is(":checked") || input.val()) {
							surveyData[name] = input.val();
						}
					});

				/* Handle navigation or completion */
				if (response) {
					const doneCondition = evalCondition(question, "div[data-question-done]");
					if (index < numQuestions - 1 && doneCondition !== false) {
						showSwal(">");
					} else if (doneCondition !== true) {
						showSwal("<");
					} else {
						evalCondition(survey, "div[data-survey-done]");
					}
				} else if (response === false && index > 0) {
					showSwal("<");
				}
			});
		};

		/* Start the survey */
		showSwal();
	}

	/*
		Function to load hosts based on the specified parameters.
		@param el: The element triggering the action.
		@param action: The action to perform.
	 */
	function load_hosts(el, action) {
		/* Find the target element named 'IP' within the parent div of the given element. */
		const target = $(el).parents("div").find("*[name='IP']");
 
		/* Store the original content of the element for later restoration. */
		const oldContent = $(el).html();
 
		/* Display a loading spinner while the request is being processed. */
		$(el).html("<i class='fa fa-spinner fa-spin'></i> <?=_('Searching');?>");

		/* AJAX Request: Load hosts asynchronously. */
		$.post(UDURL, {
			'action': action,
			'network': network
		})
		.done(function(data) {
			/* Restore the original content of the element. */
			$(el).html(oldContent);

			/* Process the data if it is not empty. */
			if (data) {
				/* Split the data into an array of hosts. */
				const hosts = data.split('\n');

				/* Check if there are any hosts. */
				if (hosts.length) {
					/* Build a select dropdown with the available hosts. */
					let dropdownOptions = "<select name='IP' class='swal-content__input' required>";
					for (let i = 0; i < hosts.length; i++) {
						if (hosts[i].length) {
							dropdownOptions += "<option value='" + hosts[i].trim() + "'>" + hosts[i].trim() + "</option>";
						}
					}
					/* Replace the target element with the new dropdown. */
					target.replaceWith(dropdownOptions + "</select>");
				} else {
					/* If no hosts are found, replace the target element with a text input. */
					target.replaceWith("<input type='text' name='IP' class='swal-content__input' autocomplete='off'>");
				}
			}
		});
	}

	/*
		Function to load shares based on the specified parameters.
		@param el: The element triggering the action.
		@param ip: The IP address.
		@param user: The username.
		@param pass: The password.
		@param action: The action to perform.
	*/
	function load_shares(el, ip, user, pass, action) {
		/* Store the original content of the element for later restoration. */
		const oldContent = $(el).html();
 
		/* Find the target element named 'SHARE' within the parent div of the given element. */
		const target = $(el).parents("div").find("*[name='SHARE']");

		/* Display a loading spinner while the request is being processed. */
		$(el).html("<i class='fa fa-spinner fa-spin'></i> <?=_('Loading');?>");

		/* Set up options for the POST request. */
		const opts = {
			"action": action,
			"IP": ip,
			"USER": user,
			"PASS": pass
		};

		/* Make an asynchronous POST request to UDURL with the specified options. */
		$.post(UDURL, opts)
			.done(function(data) {
				/* Restore the original content of the element. */
				$(el).html(oldContent);

				/* Process the data if it is not empty. */
				if (data) {
					/* Split the data into an array of shares. */
					const shares = data.split('\n');

					/* Check if there are any shares. */
					if (shares.length) {
						/* Build a select dropdown with the available shares. */
						let dropdownOptions = "<select name='SHARE' class='swal-content__input' required>";
						for (let i = 0; i < shares.length; i++) {
							if (shares[i].length) {
								dropdownOptions += "<option value='" + shares[i] + "'>" + shares[i] + "</option>";
							}
						}
						/* Replace the target element with the new dropdown. */
						target.replaceWith(dropdownOptions + "</select>");
					} else {
						/* If no shares are found, replace the target element with a text input. */
						target.replaceWith("<input type='text' name='SHARE' class='swal-content__input' autocomplete='off' required>");
					}
				} else {
					/* If no data is received, replace the target element with a text input. */
					target.replaceWith("<input type='text' name='SHARE' class='swal-content__input' autocomplete='off' required>");
				}
			});
	}

	/* Function to show success or failure alert */
	function showResultAlert(success) {
		swal2({
			title: success ? translations.success : translations.fail,
			icon: success ? "success" : "error",
			text: success ? " " : translations.checkSyslog,
			timer: 2000,
			buttons: { confirm: false, cancel: false },
		});
	}

	/* Function to show mount/unmount failure alert */
	function showMountUnmountAlert(device, operation) {
		swal2({
			title: translations.fail,
			icon: "error",
			content: {
				element: "div",
				attributes: {
					innerHTML: `<p>${translations.fail}: ${device} ${operation}.</p><p>${translations.checkSyslog}.</p>`,
				},
			},
			timer: 3000,
			buttons: { confirm: false, cancel: false },
		});
	}

	/* Reload page if browser back button was used. */
	window.addEventListener("pageshow", function (event) {
		const historyTraversal = event.persisted || (typeof window.performance != "undefined" && window.performance.navigation.type === 2);
		if (historyTraversal) {
			/* Handle page restore. */
			window.location.reload();
		}
	});

	<?
	/* Loop through network interfaces (eth0 to eth10). */
	for ($i = 0; $i < 11; $i++) {
		$interfaceVariable = "eth{$i}";

		/* Check if the network interface variable is set. */
		if (isset($$interfaceVariable)) {
			$iface = $$interfaceVariable;

			/* Extract gateway, IP address, and netmask information from the network interface. */
			$gateway = array_values(array_flip(preg_grep("/GATEWAY:/", array_flip($iface))));
			$ipaddr	= array_values(array_flip(preg_grep("/IPADDR:/", array_flip($iface))));
			$netmask = array_values(array_flip(preg_grep("/NETMASK/", array_flip($iface))));

			/* Loop through IP addresses and add them to the network array in JavaScript. */
			for ($z = 0; $z < count($ipaddr); $z++) {
				echo "network.push({gateway:'{$ipaddr[$z]}', ip:'{$ipaddr[$z]}', netmask:'{$netmask[$z]}'});\n";
			}
		}
	}
	?>

	/*
		Check if SweetAlert2 library (swal2) is undefined.
		If undefined, dynamically load the required stylesheets and scripts.
	*/
	if (typeof swal2 === "undefined") {
		/* Append the SweetAlert2 stylesheet to the head of the document. */
		$('head').append($('<link rel="stylesheet" type="text/css" />').attr('href', '<?autov("/plugins/".UNASSIGNED_PLUGIN."/assets/sweetalert2.css");?>'));

		/* Load the SweetAlert2 script dynamically. */
		$.getScript('/plugins/' + pluginPath + '/assets/sweetalert2.js');
	}

	/* Bind Arrive events for dynamically added 'tr' elements in the '#usb_devices_list' table. */
	$("#usb_devices_list").arrive("tr",{onceOnly:false},function() {
		tr = $(this);

		tr.find("span.toggle-hdd").click(function(e) {
			const button = $(this);

			button.disableSelection();
			disk = button.attr("hdd");
			el = button;
			$(".toggle-"+disk).slideToggle(0);
		});

		tr.find("button[role$=mount]").on("click", function () {
			const button = $(this);

			/* Perform the disk operation. */
			diskOperation(button.get(0), button.attr("role"), button.attr("device"));
		});

		tr.find("button[role$=format]").on( "click", function() {
			const button = $(this);

			/* Perform the format operation. */
			format_disk(this, button.attr("context"), button.attr("device"));
		});
	});

	$(function() {
		/* Initialize banners */
		if (typeof caPluginUpdateCheck === "function") {
			caPluginUpdateCheck("unassigned.devices.plg", { element: ".pluginUpdate" });
		}

		/* Set page refresh interval every 3 seconds. */
		refreshTimer = window.setInterval(refreshPage, REFRESH_INTERVAL);

		/* Set ping poll interval every 15 seconds. */
		window.setInterval(pingPoll, PING_INTERVAL);

		/* Show the current diskio icon based on the current diskio cookie value. */
		if ($.cookie('diskio') === undefined) {
			$('i.toggle').removeClass('fa-tachometer').addClass('fa-list');
		} else {
			$('i.toggle').removeClass('fa-list').addClass('fa-tachometer');
		}

		/* Update the show-disks status. */
		if ($.cookie('unassigned-disks-view') == 'false') {
			$('.show-disks').slideToggle('slow');
		}

		/* Update the show-shares status. */
		if ($.cookie('unassigned-shares-view') == 'false') {
			$('.show-shares').slideToggle('slow');
		}

		/* Update the show-historical status. */
		if ($.cookie('unassigned-historical-view') == 'false') {
			$('.show-historical').slideToggle('slow');
		}

		$('.tooltip').tooltipster({ delay: 100, trigger: 'custom', triggerOpen: { mouseenter: true }, triggerClose: { click: false, scroll: true, mouseleave: true } });

		/* Add switchButton to Tab/Title bar. */
		$('.disks-switch').switchButton({
			labels_placement: "left",
			on_label: "<?=_('Disks');?>",
			off_label: "<?=_('Disks');?>",
			checked: $.cookie('unassigned-disks-view') != 'false'
		});
		$('.disks-switch').change(function() {
			$('.show-disks').slideToggle('slow');
			$.cookie('unassigned-disks-view', $('.disks-switch').is(':checked') ? 'true' : 'false', { expires: 3650, path: '/' });
		});

		$('.shares-switch').switchButton({
			labels_placement: "left",
			on_label: "<?=_('Shares');?>",
			off_label: "<?=_('Shares');?>",
			checked: $.cookie('unassigned-shares-view') != 'false'
		});
		$('.shares-switch').change(function() {
			$('.show-shares').slideToggle('slow');
			$.cookie('unassigned-shares-view', $('.shares-switch').is(':checked') ? 'true' : 'false', { expires: 3650, path: '/' });
		});

		$('.historical-switch').switchButton({
			labels_placement: "left",
			on_label: "<?=_('Historical');?>",
			off_label: "<?=_('Historical');?>",
			checked: $.cookie('unassigned-historical-view') != 'false'
		});
		$('.historical-switch').change(function() {
			$('.show-historical').slideToggle('slow');
			$.cookie('unassigned-historical-view', $('.historical-switch').is(':checked') ? 'true' : 'false', { expires: 3650, path: '/' });
		});

		/* Proxy to check for 'tab' and 'diskio' cookie changes. */
		(function() {
			const originalSetCookie = $.cookie;

			/* Proxy the $.cookie function. */
			$.cookie = function(name, value, options) {
				if (name === 'diskio' && value !== undefined) {
					/* If the 'diskio' cookie has changed, refresh the change to show the change. */
					refreshPage();
				}

				return originalSetCookie.apply(this, arguments);
			};
		})();

		refreshPage();
	});
</script>

<div style="display:none;" data-survey-name="add_root_share" data-survey-title="<?=_('Add Root Share');?>">
	<div data-question data-question-title="<?=_('Root Share')?>" data-question-button-done="<?=_('Add');?>">
		<div data-question-content>
			<p><?=_('This is a way to gather Unraid shares into one Root Share');?>.</p>
			<?if ($var['shareDisk'] != "yes"):?>
			<p><span style="font-weight:bold;"><?=_('Note');?>:</span> <?=_('Use caution when gathering shares into one Root Share');?>. <?=_('Do not put files or folders into the /mnt/rootshare/ folder');?>.
			<p><?=_('When you copy files between shares in the Root Share, the files may not end up on the expected disks');?>.</p>
			<p><?=_('You can also subject yourself to security issues like ransomware by exposing all your shares in one Root Share');?>.</p>
			<?else:?>
			<p><span style="font-weight:bold;"><?=_('Note');?>:</span> <?=_('Disk Sharing must be disabled to add a Root Share')?>.</p>
			<p><?=_('Go to Settings->Global Share Settings and set Enable Disk Shares to Auto or Off');?>.</p>
			<?endif;?>
		</div>
	</div>

	<div data-question data-question-title="<?=_('Root Share')?>" data-question-button-done="<?=_('Add');?>">
		<div data-question-content>
			<select name="PATH" class="swal-content__input">
				<option value="user"><?=_('User Shares');?></option>
				<option value="user0" <?= $isUser0 ? '' : 'disabled'; ?>><?=_('User Shares without Pools');?></option>
			</select>
			<p><?=_('Select the Root Share');?>.</p>
			<p><?=_('User Shares - allow access to User Shares, including Cache and Pool files');?>.</p>
			<p><?=_('User Shares without Pools - allow access to User Shares, but the Root Share will not include Cache and Pool files');?>.</p>
			<p><?=_('Note');?>:&nbsp;<?= _('Exclusive Share files will not be accessible in a Root Share');?>.</p>
		</div>
	</div>
	<div data-question-load></div>
	<div data-survey-done>
		$.post(UDURL, {
			'action': 'add_root_share',
			'path': surveyData['PATH']
		})
		.done(function(data) {
			showResultAlert(data === "true");
		}, 'json')
		.fail(function() {
			showResultAlert(false);
		});
	</div>

	<div>
		<script>
			$(function() {
				/* Define a function add_root_share and attach it to the window object */
				window.add_root_share = function() {
					/* Call the doUnassignedDevicesSurvey function with the argument "add_root_share" */
					doUnassignedDevicesSurvey("add_root_share");
				};
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="add_iso_share" data-survey-title="<?=_('Add ISO File Share');?>">
	<div data-question data-question-title="<?=_('Choose ISO File')?>" data-question-button-done="<?=_('Add');?>">
		<div data-question-format>
			["data-pickroot","ISO_FILE"]
		</div>
		<div data-question-content>
			<input type='text' name='{1}' placeholder="<?=_('Click to select ISO file');?>" data-pickcloseonfile='true' data-pickfilter='iso' {0}='/mnt/user/isos/' data-pickfolders='true' required class='swal-content__input' autocomplete="off" >
		</div>
		<div data-question-load></div>
		<div data-question-done>
			(surveyData["ISO_FILE"].toLowerCase().indexOf(".iso") !== -1)
		</div>
	</div>
	<div data-survey-done>
		const opts = {
			action: "add_iso_share",
			ISO_FILE: surveyData["ISO_FILE"]
		};

		if (opts.ISO_FILE) {
			$.post(UDURL, opts)
				.done(function (data) {
					showResultAlert(data === "true");
				})
				.fail(function () {
					showResultAlert(false);
				});
		}
	</div>
	<div>
		<script>
			/* Attach a click event to the input element with the name "ISO_FILE" within the document */
			$(document).on("click", "input[name=ISO_FILE]", function() {
				/* Check if the input element has no sibling with the class "fileTree" */
				if (!$(this).siblings("div.fileTree").length) {
					/* Attach the fileTree to the input element */
					$(this).fileTreeAttach();
					/* Trigger a click event on the input element */
					$(this).trigger("click");
				}
				/* Adjust styling for the next sibling div with the class "fileTree" */
				$(this)
					.next("div.fileTree")
					.css("text-align", "left")
					.css("z-index", "10001")
					.css("left", "20px")
					.css("width", $(this).width() + 13);
			});

			/* Execute a function when the document is ready */
			$(function() {
				/* Define a function add_iso_share and attach it to the window object */
				window.add_iso_share = function() {
					/* Call the doUnassignedDevicesSurvey function with the argument "add_iso_share" */
					doUnassignedDevicesSurvey("add_iso_share");
				};
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="format_disk" data-survey-title="<?=_('Partition and Format Disk');?>">
<?if (file_exists("/usr/sbin/parted") && get_config("Config", "destructive_mode") == "enabled"):?>
	<div data-question data-question-title="<?=_('Choose File System Format');?>">
		<div data-question-format>
			[surveyOption.device, surveyOption.type]
		</div>
		<div data-question-content>
			<select name="FS" class="swal-content__input">
				<option value="xfs">XFS</option>
				<option value="btrfs">BTRFS</option>
				<?if (version_compare($version['version'],"6.11.9", ">")):?>
				<option value="zfs">ZFS</option>
				<?endif;?>
				<option value="xfs-encrypted">XFS - encrypted</option>
				<option value="btrfs-encrypted">BTRFS - encrypted</option>
				<?if (version_compare($version['version'],"6.11.9", ">")):?>
				<option value="zfs-encrypted">ZFS - encrypted</option>
				<?endif;?>
				<option value="ntfs">NTFS</option>
				<option value="exfat">exFAT</option>
				<option value="fat32">FAT32</option>
			</select>
			<p><span style="font-weight:bold;"><?=_('Note');?>:</span> <?=_('An XFS, BTRFS, or ZFS disk partitioned in UD is compatible with the array disk partitioning and can be added to the array');?>.</p>
		</div>
		<div data-question-load></div>
		<div data-question-done></div>
	</div>

	<div data-question data-question-title="<?=_('ZFS Pool Name');?>">
		<div data-question-condition>
			surveyData['FS'] == 'zfs' || surveyData['FS'] == 'zfs-encrypted'
		</div>
		<div data-question-content>
			<div class="swal-content">
				<input type="text" class="swal-content__input" name="POOL_NAME" required placeholder="<?=_('Pool Name');?>">
				<p><?=_('Enter the Pool Name for this device');?>. <?=_('This wil also be the mountpoint for the disk');?>.</p>
			</div>
		</div>
	</div>

	<div data-question data-question-title="<?=_('Password');?>">
		<div data-question-condition>
			surveyData['FS'] == 'xfs-encrypted' || surveyData['FS'] == 'btrfs-encrypted' || surveyData['FS'] == 'zfs-encrypted'
		</div>
		<div data-question-content>
			<div class="swal-content">
				<input type="password" class="swal-content__input" name="PASS" autocomplete="off" placeholder="<?=_('Password');?>">
				<p><?=_('Enter the password to use for this disk');?>. <?=_('Leave blank to use the array password/passphrase');?>. <?=_('If using a disk password, be sure to enter the password for this disk in UD Settings so it can be mounted');?>.</p>
				<p><span style="font-weight:bold;"><?=_('Note');?>:</span> <?=_('Remember your password');?>. <?=_('It cannot be recovered');?>!</p>
			</div>
		</div>
	</div>

	<div data-question data-question-title="" data-question-button-done=<?=_('Format');?> data-question-icon="warning">
		<div data-question-format>
			[surveyOption.device, surveyOption.type]
		</div>
		<div data-question-content>
			<div class="swal-title"><?=_('Any data on this disk will be lost');?>!</div>
			<div style="margin-bottom: 25px;font-size: 20px;"><?=_('Type');?> <span class="red">'<?=_('Yes');?>'</span> <?=_('to format');?>:</div>
			<input type="text" name="confirmation" class="swal-content__input" autocomplete="off" required >
		</div>
		<div data-question-load></div>
		<div data-question-done>
			(surveyData["confirmation"] == "<?=_('Yes');?>")
		</div>
	</div>

	<div data-survey-done data-survey-done-wait="true">
		const targetButton = $("button[device='"+surveyOption.device+"']");
		targetButton.prop('disabled', true);
		targetButton.html("<i class='fa fa-spinner fa-spin'></i>" + "<?=_('Formatting');?>");

		/* Retart the page refresh timer. */
		window.clearInterval(refreshTimer);
		refreshTimer = window.setInterval(refreshPage, REFRESH_INTERVAL);

		/* Start the refresh timer to refresh the page after the mount/unmount script starts. */
		window.setTimeout(refreshPage, (REFRESH_INTERVAL / 6));

		$.post(UDURL, {
			'action': 'format_' + surveyOption.type,
			'device': surveyOption.device,
			'fs': surveyData["FS"],
			'pass': surveyData["PASS"],
			'pool_name': surveyData["POOL_NAME"]
		}, function (data) {
			targetButton.prop('disabled', true);
			targetButton.html(data.status ? "<?=_('Formatted');?>" : "<?=_('Format failed');?>");
			showResultAlert(data.status);
		}, 'json').fail(function () {
			showResultAlert(false);
		});
	</div>
	<div>
		<script>
			$(function() {
				window.format_disk = function(bt, type, device){doUnassignedDevicesSurvey("format_disk", {el:bt, type:type, device:device});}
			});
		</script>
	</div>
	<?else:?>
	<div data-question data-question-title="<?=_('Partition and Format Disk');?>">
		<div data-question-content>
			<p><?=_('You must enable the Destructive Mode in UD Settings before you can Format this disk');?>.</p>
		</div>
	</div>
	<div data-survey-done data-survey-done-wait="false">
	</div>
	<?endif;?>
	<div>
		<script>
			/* Execute a function when the document is ready */
			$(function() {
				/* Define a function format_disk and attach it to the window object */
				window.format_disk = function(bt, type, device) {
					/* Call the doUnassignedDevicesSurvey function with the arguments "format_disk", {el:bt, type:type, device:device} */
					doUnassignedDevicesSurvey("format_disk", {el: bt, type: type, device: device});
				};
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="remove_partiton" data-survey-title="">
	<div data-question data-question-title="" data-question-button-done="<?=_('Remove');?>" data-question-icon="warning">
		<div data-question-format>
			[surveyOption.partition, surveyOption.device, surveyOption.serial]
		</div>
		<div data-question-content>
			<div class="swal-title"><?=_('Data on this disk will be lost');?>!</div>
			<div class="swal-title" style="font-size: 20px;"><?=_('Remove partition');?> <span class="red">{0}</span> <?=_('from disk');?> <span class="red">{1}?</span></div>
			<div style="margin-bottom: 25px;font-size: 20px;"><?=_('Type');?> <span class="red">'<?=_('Yes');?>'</span> <?=_('to delete this partition');?>:</div>
			<input type="text" name="confirmation" class="swal-content__input" autocomplete="off" required >
		</div>
		<div data-question-load></div>
		<div data-question-done>
			(surveyData["confirmation"] == "<?=_('Yes');?>")
		</div>
	</div>
	<div data-survey-done>
		const targetSpan = $("span[device='" + surveyOption.device + surveyOption.partition + "']");
		targetSpan.prop('disabled', true);
		targetSpan.html("<i class='fa fa-spinner fa-spin'></i> <?=_('Removing');?>");

		$.post(UDURL, {
			'action': 'rm_partition',
			'serial': surveyOption.serial,
			'device': surveyOption.device,
			'partition': surveyOption.partition
		})
		.done(function(data) {
			showResultAlert(data === "true");
		}, 'json')
		.fail(function() {
			showResultAlert(false);
		});
	</div>
	<div>
		<script>
			/* Execute a function when the document is ready */
			$(function() {
				/* Define a function rm_partition and attach it to the window object */
				window.rm_partition = function(bt, serial, device, partition) {
					/* Call the doUnassignedDevicesSurvey function with the arguments "remove_partiton", {el:bt, serial:serial, device:device, partition:partition} */
					doUnassignedDevicesSurvey("remove_partiton", {el: bt, serial: serial, device: device, partition: partition});
				};
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="clear_disk" data-survey-title="">
	<div data-question data-question-title="" data-question-button-done="<?=_('Clear');?>" data-question-icon="warning">
		<div data-question-format>
			[surveyOption.device, surveyOption.serial]
		</div>
		<div data-question-content>
			<div class="swal-title"><?=_('Data on this disk will be lost');?>!</div>
			<div class="swal-title" style="font-size: 20px;"><?=_('Clear Disk');?> <span class="red">{0}?</span></div>
			<div style="margin-bottom: 25px;font-size: 20px;"><?=_('Type');?> <span class="red">'<?=_('Yes');?>'</span> <?=_('to clear this disk of all partitions');?>:</div>
			<input type="text" name="confirmation" class="swal-content__input" autocomplete="off" required >
			<?if ($Preclear):?>
			<p><?=_('If this disk was pre-cleared, you will remove the pre-clear signature.  If you add the disk to the array and the pre-clear signature is removed, Unraid will go through the lengthy process of clearing the disk again')?>.</p>
			<?endif;?>
		</div>
		<div data-question-load></div>
		<div data-question-done>
			(surveyData["confirmation"] == "<?=_('Yes');?>")
		</div>
	</div>
	<div data-survey-done>
		const targetSpan = $("span[device='" + surveyOption.device + surveyOption.partition + "']");
		targetSpan.prop('disabled', true);
		targetSpan.html("<i class='fa fa-spinner fa-spin'></i> <?=_('Removing');?>");

		$.post(UDURL, {
			'action': 'clr_disk',
			'serial': surveyOption.serial,
			'device': surveyOption.device
		})
		.done(function(data) {
			showResultAlert(data === "true");
		}, 'json')
		.fail(function() {
			showResultAlert(false);
		});
	</div>
	<div>
		<script>
			/* Execute a function when the document is ready */
			$(function() {
				/* Define a function clr_disk and attach it to the window object */
				window.clr_disk = function(bt, serial, device) {
					/* Call the doUnassignedDevicesSurvey function with the arguments "clear_disk", {el:bt, serial:serial, device:device} */
					doUnassignedDevicesSurvey("clear_disk", {el: bt, serial: serial, device: device});
				};
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="remove_iso_share" data-survey-title="<?=_('Remove ISO File mount');?>">
	<div data-question data-question-title="" data-question-button-done="<?=_('Remove');?>" data-question-icon="warning">
		<div data-question-format>
			[surveyOption.device, surveyOption.compressed]
		</div>
		<div data-question-content>
			<div class="swal-title" style="font-size: 20px;"><?=_('This will remove the ISO file share for');?>:</div>
			<div style="margin-bottom: 15px;margin-top: 15px;">
				<span style="font-weight: bold;">{1}</span>
			</div>
			<div class="swal-title" style="font-size: 20px;">
				<span class="red" style="font-weight: bold;"><?=_('Are you sure');?>?</span>
			</div>
		</div>
		<div data-question-load></div>
		<div data-question-done></div>
	</div>
	<div data-survey-done>
		$.post(UDURL, {
			'action': 'remove_iso_config',
			'device': surveyOption.device
		})
		.done(function(data) {
			showResultAlert(data === "true");
		}, 'json')
		.fail(function() {
			showResultAlert(false);
		});
	</div>
	<div>
		<script>
			/* Execute a function when the document is ready */
			$(function() {
				/* Define a function remove_iso_config and attach it to the window object */
				window.remove_iso_config = function(device, compressed) {
					/* Call the doUnassignedDevicesSurvey function with the arguments "remove_iso_share", {device:device, compressed:compressed} */
					doUnassignedDevicesSurvey("remove_iso_share", {device: device, compressed: compressed});
				};
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="remove_disk_config" data-survey-title="<?=_('Remove Disk Config');?>">
	<div data-question data-question-title="" data-question-button-done="<?=_('Remove');?>" data-question-icon="warning">
		<div data-question-format>
			[surveyOption.serial, surveyOption.compressed]
		</div>
		<div data-question-content>
			<div class="swal-title" style="font-size: 20px;"><?=_('This will remove the saved configuration of');?>:</div>
			<div style="margin-bottom: 15px;margin-top: 15px;">
				<span style="font-weight: bold;">{1}</span>
			</div>
			<div class="swal-title" style="font-size: 20px;">
				<span class="red" style="font-weight: bold;"><?=_('Are you sure');?>?</span>
			</div>
		</div>
		<div data-question-load></div>
		<div data-question-done></div>
	</div>
	<div data-survey-done>
		$.post(UDURL, {
			'action': 'remove_config',
			'serial': surveyOption.serial
		})
		.done(function(data) {
			showResultAlert(data === "true");
		}, 'json')
		.fail(function() {
			showResultAlert(false);
		});
	</div>
	<div>
		<script>
			/* Execute a function when the document is ready */
			$(function(){
				/* Define a function remove_disk_config and attach it to the window object */
				window.remove_disk_config = function(serial, compressed) {
					/* Call the doUnassignedDevicesSurvey function with the arguments "remove_disk_config", {serial:serial, compressed:compressed} */
					doUnassignedDevicesSurvey("remove_disk_config", {serial: serial, compressed: compressed});
				};
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="remove_remote_share" data-survey-title="<?=_('Remove SMB/NFS mount');?>?">
	<div data-question data-question-title="" data-question-button-done="<?=_('Remove');?>" data-question-icon="warning">
		<div data-question-format>
			[surveyOption.device, surveyOption.compressed, surveyOption.type]
		</div>
		<div data-question-content>
			<div class="swal-title" style="font-size: 20px;"><?=_('This will remove the');?> <span style="font-weight: bold;">{2}</span> <?=_('share for');?>:</div>
			<div style="margin-bottom: 15px;margin-top: 15px;">
				<span style="font-weight: bold;">{1}</span>
			</div>
			<div class="swal-title" style="font-size: 20px;">
				<span class="red" style="font-weight: bold;"><?=_('Are you sure');?>?</span>
			</div>
		</div>
		<div data-question-load></div>
		<div data-question-done></div>
	</div>
	<div data-survey-done>
		$.post(UDURL, {
			'action': 'remove_samba_config',
			'device': surveyOption.device
		})
		.done(function(data) {
			showResultAlert(data === "true");
		}, 'json')
		.fail(function() {
			showResultAlert(false);
		});
	</div>
	<div>
		<script>
			/* Execute a function when the document is ready */
			$(function(){
				/* Define a function remove_samba_config and attach it to the window object */
				window.remove_samba_config = function(device, compressed, type) {
					/* Call the doUnassignedDevicesSurvey function with the arguments "remove_remote_share", {device:device, compressed:compressed, type:type} */
					doUnassignedDevicesSurvey("remove_remote_share", {device: device, compressed: compressed, type: type});
				};
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="add_remote_share" data-survey-title="<?=_('Add Remote Share');?>">
	<div data-question data-question-title="<?=_('Click on Icon to Choose Protocol');?>">
		<div data-question-format>
			["nfs_radio","smb_radio"]
		</div>
		<div data-question-content>
			<div class="image-radio">
				<input type="radio" id="{0}" name="PROTOCOL" value="NFS" required="" <?=($var['shareNFSEnabled']=="no") ? "disabled" : "";?>>
				<label class="image-radio-label image-radio-linux" for="{0}" title="<?=_('Click to select NFS');?>"></label>
				<input type="radio" id="{1}" name="PROTOCOL" value="SMB" required="" <?=($var['shareSMBEnabled']=="no") ? "disabled" : "";?>>
				<label class="image-radio-label image-radio-windows" for="{1}" title="<?=_('Click to select SMB');?>"></label>
				<p><?=_('WARNING').": "._('Use caution when using a remote share local mount in a Docker Container or VM for critical data');?>.  <?=_('Media mapped to apps like Plex should not be a problem');?>.  <?=_('Remote share mounts are dependent on a solid and reliable network connection and that can be difficult to achieve');?>. <?=_('If the remote share goes offline, you may have problems');?>!</p>
				<?if ($var['shareNFSEnabled']=="no"):?><p><?=_('Note').": "._('You must enable NFS in Settings->NFS to mount NFS shares').".";?></p><?endif;?>
				<?if ($var['shareSMBEnabled']=="no"):?><p><?=_('Note').": "._('You must enable SMB in Settings->SMB to mount SMB shares').".";?></p><?endif;?>
			</div>
		</div>
	</div>
<?
	$message  = "<p>"._('Search for Servers, or enter the Server name or IP address manually')."</p>";
	$message .= "<p>"._('If the IP address of the server shows in the list after searching, your DNS server is not resolving the name')."</p>";
	$message .= "<p>"._('Enter the server name and it will be added to the local DNS names and will then resolve by name')."</p>";
?>
	<div data-question data-question-title="<?=_('Choose NFS Server');?>">
		<div data-question-condition>
			surveyData['PROTOCOL'] == 'NFS';
		</div>
		<div data-question-format>
			["list_nfs_hosts"]
		</div>
		<div data-question-content>
			<input type="text" class="swal-content__input" name="IP" autocomplete="off" required placeholder="<?=_('Enter or Select Server');?>"><br>
			<button class="swal-button" onclick='load_hosts(this,"{0}")'><?=_('Search For Servers');?></button>
			<?=$message;?>
		</div>
	</div>
	<div data-question data-question-title="<?=_('Choose SMB Server');?>">
		<div data-question-condition>
			surveyData['PROTOCOL'] == 'SMB';
		</div>
		<div data-question-format>
			["list_samba_hosts"]
		</div>
		<div data-question-content>
			<input type="text" class="swal-content__input" name="IP" autocomplete="off" required placeholder="<?=_('Enter or Select Server');?>"><br>
			<button class="swal-button" onclick='load_hosts(this,"{0}")'><?=_('Search For Servers');?></button>
			<?=$message;?>
		</div>
	</div>
	<div data-question data-question-title="<?=_('Username');?>">
		<div data-question-condition>
			surveyData['PROTOCOL'] == 'SMB';
		</div>
		<div data-question-content>
			<div class="swal-content">
				<input type="text" class="swal-content__input" name="USER" autocomplete="off" placeholder="<?=_('Username');?>">
				<p><?=_('Enter the Username if the share is password protected');?>.</p>
				<p><?=_('You will need to enter credentials to list the shares');?>.</p>
			</div>
		</div>
	</div>
	<div data-question data-question-title="<?=_('Password');?>">
		<div data-question-condition>
			surveyData['PROTOCOL'] == 'SMB'
		</div>
		<div data-question-content>
			<div class="swal-content">
				<input type="password" class="swal-content__input" name="PASS" autocomplete="new-password" placeholder="<?=_('Password');?>">
				<p><?=_('Enter the Password if the share is password protected');?>.</p>
				<p><?=_('You will need to enter credentials to list the shares');?>.</p>
			</div>
		</div>
	</div>
	<div data-question data-question-title="<?=_('Domain');?>">
		<div data-question-condition>
			surveyData['PROTOCOL'] == 'SMB'
		</div>
		<div data-question-content>
			<div class="swal-content">
				<input type="text" class="swal-content__input" name="DOMAIN" autocomplete="off" placeholder="<?=_('Domain');?>">
				<p><?=_('Enter the Domain for the share if on a Domain');?>.</p>
			</div>
		</div>
	</div>
	<div data-question data-question-title="<?=_('Choose Share');?>">
		<div data-question-format>
			[surveyData['PROTOCOL'], surveyData['IP'], surveyData['USER'], surveyData['PASS'], surveyData['DOMAIN'], (surveyData['PROTOCOL'] == 'SMB' ? 'list_samba_shares' : 'list_nfs_shares')]
		</div>
		<div data-question-content>
			<input type='text' class="swal-content__input" autocomplete="off" name='SHARE' required placeholder="<?=_('Enter or Select Share');?>"><br>
			<button class="swal-button" onclick='load_shares(this, "{1}", "{2}", "{3}", "{5}")'><?=_('Load Shares');?></button>
			<p><?=_('Search for Shares or enter the Share name manually');?>.</p>
			<p><?=_('If SMB shares do not show, check your credentials');?>.</p>
		</div>
	</div>
	<div data-survey-done>
		const opts = {
			action: "add_samba_share",
			PROTOCOL: surveyData['PROTOCOL'],
			IP: surveyData['IP'],
			USER: surveyData['USER'],
			DOMAIN: surveyData['DOMAIN'],
			PASS: surveyData['PASS'],
			SHARE: surveyData['SHARE']
		};

		if (opts.SHARE && opts.IP) {
			$.post(UDURL, opts)
				.done(function (data) {
					showResultAlert(data === "true");
				})
				.fail(function () {
					showResultAlert(false);
				});
		}
	</div>
	<div>
		<script>
			/* Execute a function when the document is ready */
			$(function(){
				/* Define a function add_samba_share and attach it to the window object */
				window.add_samba_share = function(i) {
					/* Call the doUnassignedDevicesSurvey function with the arguments "add_remote_share", i */
					doUnassignedDevicesSurvey("add_remote_share", i);
				};
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="change_mountpoint" data-survey-title="">
	<div data-question data-question-title="<?=_('Change Disk Mount Point');?>" data-question-button-done="<?=_('Change');?>">
		<div data-question-format>
			[surveyOption.mountpoint, surveyOption.disklabel]
		</div>
		<div data-question-content>
			<input type="text" class="swal-content__input" name="MOUNTPOINT" value={0} placeholder="<?=_('Mount Point');?>">
			<p><?=_('Disk Label');?>:&nbsp;{1}</p>
			<p><?=_('Changing the Mount Point will also change the disk label on all disks and the pool name on a ZFS disk');?>.</p>
		</div>
		<div data-question-load></div>
	</div>
	<div data-survey-done data-survey-done-wait="true">
		$.post(UDURL, {
			'action': 'chg_mountpoint',
			'serial': surveyOption.serial,
			'partition': surveyOption.partition,
			'device': surveyOption.device,
			'fstype': surveyOption.fstype,
			'mountpoint': surveyData['MOUNTPOINT']
		})
		.done(function(data) {
			showResultAlert(data === "true");
		}, 'json')
		.fail(function() {
			showResultAlert(false);
		});
	</div>
	<div>
		<script>
			/* Execute a function when the document is ready */
			$(function() {
				/* Define a function chg_mountpoint and attach it to the window object */
				window.chg_mountpoint = function(serial, partition, device, fstype, mountpoint, disklabel) {
					/* Call the doUnassignedDevicesSurvey function with the arguments "change_mountpoint" and an object containing the specified parameters */
					doUnassignedDevicesSurvey("change_mountpoint", {
						serial: serial,
						partition: partition,
						device: device,
						fstype: fstype,
						mountpoint: mountpoint,
						disklabel: disklabel
					});
				};
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="change_samba_mountpoint" data-survey-title="">
	<div data-question data-question-title="<?=_('Change SMB/NFS Mount Point');?>" data-question-button-done="<?=_('Change');?>">
		<div data-question-format>
			[surveyOption.mountpoint]
		</div>
		<div data-question-content>
			<input type="text" class="swal-content__input" name="MOUNTPOINT" value={0} placeholder="<?=_('Mount Point');?>" required>
		</div>
		<div data-question-load></div>
		<div data-question-done></div>
	</div>
	<div data-survey-done data-survey-done-wait="true">
		$.post(UDURL, {
			'action': 'chg_samba_mountpoint',
			'device': surveyOption.device,
			'mountpoint': surveyData['MOUNTPOINT']
		})
		.done(function(data) {
			showResultAlert(data === "true");
		}, 'json')
		.fail(function() {
			showResultAlert(false);
		});
	</div>
	<div>
		<script>
			/* Execute a function when the document is ready */
			$(function() {
				/* Define a function chg_samba_mountpoint and attach it to the window object */
				window.chg_samba_mountpoint = function(device, mountpoint) {
					/* Call the doUnassignedDevicesSurvey function with the arguments "change_samba_mountpoint" and an object containing the specified parameters */
					doUnassignedDevicesSurvey("change_samba_mountpoint", {
						device: device,
						mountpoint: mountpoint
					});
				};
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="change_iso_mountpoint" data-survey-title="">
	<div data-question data-question-title="<?=_('Change ISO File Mount Point');?>" data-question-button-done="<?=_('Change');?>">
		<div data-question-format>
			[surveyOption.mountpoint]
		</div>
		<div data-question-content>
			<input type="text" class="swal-content__input" name="MOUNTPOINT" value={0} placeholder="<?=_('Mount Point');?>" required>
		</div>
		<div data-question-load></div>
		<div data-question-done></div>
	</div>
	<div data-survey-done data-survey-done-wait="true">
		$.post(UDURL, {
			'action': 'chg_iso_mountpoint',
			'device': surveyOption.device,
			'mountpoint': surveyData['MOUNTPOINT']
		})
		.done(function(data) {
			showResultAlert(data === "true");
		}, 'json')
		.fail(function() {
			showResultAlert(false);
		});
	</div>
	<div>
		<script>
			/* Execute a function when the document is ready */
			$(function() {
				/* Define a function chg_iso_mountpoint and attach it to the window object */
				window.chg_iso_mountpoint = function(device, mountpoint) {
					/* Call the doUnassignedDevicesSurvey function with the arguments "change_iso_mountpoint" and an object containing the specified parameters */
					doUnassignedDevicesSurvey("change_iso_mountpoint", {
						device: device,
						mountpoint: mountpoint
					});
				};
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="rescan_disks" data-survey-title="">
	<div data-question data-question-title="" data-question-button-done="<?=_('Proceed');?>" data-question-icon="warning">
		<div data-question-content>
			<p><?=_('Refresh Disks and Configuration');?>?</p>
			<ul>
			<li style="text-align:left;"><?=_('All disks will be refreshed using udev');?>.</li>
			<li style="text-align:left;"><?=_('Remote Shares online status will be reset');?>.</li>
			<li style="text-align:left;"><?=_('All Unassigned Devices configurations will be updated from flash drive');?>.</li>
			</ul>
		</div>
		<div data-question-load></div>
		<div data-question-done></div>
	</div>
	<div data-survey-done>
		$.post(UDURL, {
			'action': 'rescan_disks',
		})
		.done(function(data) {
			showResultAlert(data === "true");
		}, 'json')
		.fail(function() {
			showResultAlert(false);
		});
	</div>
	<div>
		<script>
			/* Execute a function when the document is ready */
			$(function() {
				/* Define a function rescan_disks and attach it to the window object */
				window.rescan_disks = function() {
					/* Call the doUnassignedDevicesSurvey function with the arguments "rescan_disks"} */
					doUnassignedDevicesSurvey("rescan_disks");
				};
			});
		</script>
	</div>
</div>
