Menu="Utilities"
Title="Unassigned Devices"
Icon="unlink"
Tag="unlink"
---
<?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2023, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin			= "unassigned.devices";
$docroot		= $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
require_once "plugins/$plugin/include/lib.php";

$config_file = $paths['config_file'];
$cfg = is_file($config_file) ? @parse_ini_file($config_file, true) : array();
$cfg['Config']['common_cmd']		= $cfg['Config']['common_cmd'] ?? '';
$cfg['Config']['destructive_mode']	= $cfg['Config']['destructive_mode'] ?? '';
$cfg['Config']['automount_usb']		= $cfg['Config']['automount_usb'] ?? '';
$cfg['Config']['discard']			= $cfg['Config']['discard'] ?? '';
$cfg['Config']['symlinks']			= $cfg['Config']['symlinks'] ?? '';
$cfg['Config']['smb_version']		= $cfg['Config']['smb_version'] ?? '';
$cfg['Config']['nfs_version']		= $cfg['Config']['nfs_version'] ?? '';
$cfg['Config']['debug_level']		= $cfg['Config']['debug_level'] ?? '';
$cfg['Config']['smb_security']		= $cfg['Config']['smb_security'] ?? '';
$cfg['Config']['case_names']		= $cfg['Config']['case_names'] ?? '';
$cfg['Config']['force_user']		= $cfg['Config']['force_user'] ?? '';
$cfg['Config']['nfs_export']		= $cfg['Config']['nfs_export'] ?? '';
$cfg['Config']['nfs_security']		= $cfg['Config']['nfs_security'] ?? '';
$cfg['Config']['nfs_rule']			= $cfg['Config']['nfs_rule'] ?? '';
$cfg['Config']['pswd_serial']		= $cfg['Config']['pswd_serial'] ?? '';
$cfg['Config']['password']			= $cfg['Config']['password'] ?? '';
$cfg['Config']['change_uuid']		= $cfg['Config']['change_uuid'] ?? '';
$text								= str_replace(";", "\n", $cfg['Config']['nfs_rule']);

/* See if conditions are set for destructive mode to be enabled. */
$parted = file_exists("/usr/sbin/parted");
if ((! $parted) && ($cfg['Config']['destructive_mode'] == "enabled")) {
	$cfg['Config']['destructive_mode'] = "disabled";
}

/* Get the version of Unraid we are running. */
$version = parse_ini_file("/etc/unraid-version");

/* Adjustments for 6.12 UI changes. */
if (version_compare($version['version'], '6.12.0-beta5', '>')) {
	$title_classid	=  "class='title'";
} else {
	$title_classid	= "id='title'";
}

/* If Unraid is 6.9 or less, set NFS version for v3. */
if (version_compare($version['version'],"6.9.9", "<")) {
	$cfg['Config']['nfs_version'] = "3";
}

/* Get array of devices that can have UUID changed - unmounted, xfs devices. */
$uuid_devices = array();

/* Get array of encrypted devices that can have a password set in settings. */
$encrypt_devices = array();

foreach (get_all_disks_info() as $d) {
	/* If the disk dropped out of the array, skip it. */
	if (isset($d['array_disk']) && ($d['array_disk'])) {
		continue;
	}

	if (isset($d['partitions'][0]['fstype'])) {
		/* Get an array of devices that are candidates for uuid change. */
		if (($d['partitions'][0]['fstype'] == "xfs" || $d['partitions'][0]['fstype'] == "btrfs" || $d['partitions'][0]['fstype'] == "crypto_LUKS") && (! $d['partitions'][0]['mounted'])) {
			$a = array();
			$a['device'] = $d['device'];
			$a['label'] = $d['serial'];
			$uuid_devices[] = $a;
		}

		/* Get an array of devices that are encrypted for password setting. */
		if ($d['partitions'][0]['fstype'] == "crypto_LUKS" && (! $d['partitions'][0]['mounted'])) {
			$a = array();
			$a['device'] = $d['device'];
			$a['label'] = $d['serial'];
			$encrypt_devices[] = $a;
		}
	}

	if (isset($d['partitions'][1]['fstype'])) {
		/* apfs file systems can also use a password. */
		if (isset($d['partitions'][1])) {
			if ($d['partitions'][1]['fstype'] == "apfs" && (! $d['partitions'][1]['mounted'])) {
				$a = array();
				$a['label'] = $d['serial'];
				$encrypt_devices[] = $a;
			}
		}
	}
}
?>

<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.filetree.js')?>"></script>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>" >

<style type="text/css">
	.fileTree {
		border: solid 1px #BBB;
		background: #FFF;
		overflow: scroll;
		padding: 5px;
		position:absolute;
		z-index:100;
		display:none;
		color:initial;
	}
</style>

<script type="text/javascript">
	function openFileBrowser(el, root, filter = true, on_folders = true, on_files = true) {
		if (! filter && ! on_files)	{
			filter = 'HIDE_FILES_FILTER';
		}
		var p = $(el);

		/* Skip if fileTree is already open. */
		if (! p.next().hasClass('fileTree') ){
			/* create a random id */
			var r = Math.floor((Math.random()*1000)+1);

			/* Add a new span and load fileTree. */
			p.after("<span id='fileTree"+r+"' class='textarea fileTree'></span>");
			var ft = $('#fileTree'+r);
			ft.fileTree({
					root: root,
					top:  root,
					filter: filter,
					allowBrowsing : true
				},
				function(file){if(on_files){p.val(file);ft.slideUp('fast',function (){ft.remove();});};p.trigger('change');},
				function(folder){if(on_folders){p.val(folder);$(ft).slideUp('fast',function (){$(ft).remove();});};p.trigger('change');}
			);

			/* Format fileTree according to parent position, height and width */
			ft.css({'left':p.position().left,'top':( p.position().top + p.outerHeight() ),'width':(p.width()) });

			/* close if click elsewhere. */
			$(document).mouseup(function(e){if (! ft.is(e.target) && ft.has(e.target).length === 0){ft.slideUp('fast',function (){$(ft).remove();});}});

			/* close if parent changed. */
			p.bind('keydown',function(){ft.slideUp('fast',function (){$(ft).remove();});});

			/* Open fileTree */
			ft.slideDown('fast');
		} else {
			return null;
		}
	} 

	function prepareSecurity(el) {
		$("#smb_security").css("display", ( $(el).val() == "no" || $(el).val() == "public" ? "none" : "block") );
	}
</script>

<div <?=$title_classid;?> class="nocontrol">_(Common Settings)_</div>
<form markdown="1" name="common_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#section" value="Config">
<input type="hidden" name="#file" value="unassigned.devices/unassigned.devices.cfg">
<input type="hidden" name="#command" value="/plugins/unassigned.devices/scripts/rc.settings">
<input type="hidden" name="#arg[1]" value="save">

<?if (! $parted):?>
:ud_settings_plus_plug:
> **Note:** Install <a href='/Apps?search=unassigned%20devices%20plus'>Unassigned Devices Plus</a> in order to mount apfs, HFS+, and exFAT disk formats, and enable desctrctive mode.

:end
<?endif;?>

_(Common Script)_:
: <input type="text" name="common_cmd" style="width:40%;" onclick="openFileBrowser(this,'/boot/config/plugins/<?=$plugin;?>', 'sh');" autocomplete="off" value="<?=$cfg['Config']['common_cmd'];?>">

:ud_settings_common_script_plug:
> If set, this script will run before the device script. The action is in the environment variable **$ACTION**. Be sure you reference all commands with their full path.
:end

_(Destructive Mode)_:
: <select name="destructive_mode" size="1" <?if (! $parted):?>disabled<?endif;?>>
  <?=mk_option($cfg["Config"]["destructive_mode"], "disabled", "_(Disabled)_");?>
  <?=mk_option($cfg["Config"]["destructive_mode"], "enabled", "_(Enabled)_");?>
  </select><?if (! $parted):?>&nbsp;_(Install)_&nbsp;<a href='/Apps?search=unassigned%20devices%20plus'>Unassigned Devices Plus</a>&nbsp;_(to enable Destructive Mode)_.<?endif;?>

:ud_settings_destructive_plug:
> If enabled, this will allow you to erase and format partitions using Unassigned Devices. This cannot be enabled unless the 'Unassigned Devices Plus' plugin is installed.
:end

_(Auto Mount USB Devices)_?
: <select name="automount_usb" size="1">
  <?=mk_option($cfg["Config"]["automount_usb"], "no", "_(No)_");?>
  <?=mk_option($cfg["Config"]["automount_usb"], "yes", "_(Yes)_");?>
  </select>

:ud_settings_mount_usb_devices_plug:
> When set to **Yes**, will auto mount a new USB device and share it without user intervention.
:end

_(Mount SSDs with 'discard' option)_?
: <select name="discard" size="1">
  <?=mk_option($cfg["Config"]["discard"], "yes", "_(Yes)_");?>
  <?=mk_option($cfg["Config"]["discard"], "no", "_(No)_");?>
  </select>

:ud_settings_discard_plug:
> Mount SSDs that support discard with 'discard' option. If you are using the SSD Trim Settings to do a periodic trim of SSDs you can set this to **No**.
:end

_(Legacy Mount Point Compatibility)_?
: <select name="symlinks" size="1">
  <?=mk_option($cfg["Config"]["symlinks"], "no", "_(No)_");?>
  <?=mk_option($cfg["Config"]["symlinks"], "yes", "_(Yes)_");?>
  </select>

:ud_settings_symlinks_plug:
> Set to **Yes** to create symlinks for /mnt/remotes/ at /mnt/disks/.
>
> This is for backwards compatibility of VM and Docker Container mappings to the /mnt/disks/ mount point.
> You are encouraged to change your mappings to the /mnt/remotes/ mount point.
>
> If you do not need the backwards compatibility, leave it set to **No**.
:end

_(Specify SMB Version when Mounting Remote Shares)_?
: <select name="smb_version" size="1">
  <?=mk_option($cfg["Config"]["smb_version"], "no", "_(No)_");?>
  <?=mk_option($cfg["Config"]["smb_version"], "yes", "_(Yes)_");?>
  </select>

:ud_settings_specify_smb_vers_plug:
> Set to **No** for Unassigned Devices to first try to mount remote shares by not setting the SMB version when mounting.
>
> Set to **Yes** for Unassigned Devices to only mount SMB remote shares specifying the SMB version.
>
> Some remote servers need to have the version specified.
:end

_(NFS Version to use when Mounting Remote Shares)_:
: <select name="nfs_version" size="1" <?if ((version_compare($version['version'],"6.9.9", "<")) || ($var['shareNFSEnabled']=="no")):?>disabled<?endif;?>>
  <?=mk_option($cfg["Config"]["nfs_version"], "3", "_(NFSv3)_");?>
  <?=mk_option($cfg["Config"]["nfs_version"], "4", "_(NFSv4)_");?>
<?if ($var['shareNFSEnabled']=="yes"):?>
  </select>&nbsp;_(Unraid 6.10 or later is required for NFSv4 support)_.
<?else:?>
  </select>&nbsp;_(NFS must be enabled in Settings->NFS for NFS support)_.
<?endif;?>

:ud_settings_specify_nfs_vers_plug:
> Set to **NFSv3** to mount all NFS Remote Shares with NFSv3.
>
> Set to **NFSv4** to mount all NFS Remote Shares with NFSv4.
>
> All NFS remote shares will be mounted with the specified version.
:end

_(Debug Log Level)_:
: <select name="debug_level" size="1">
  <?=mk_option($cfg["Config"]["debug_level"], "0", "_(None)_");?>
  <?=mk_option($cfg["Config"]["debug_level"], "1", "_(Udev and Hotplug)_");?>
  <?=mk_option($cfg["Config"]["debug_level"], "2", "_(Refresh and Update)_");?>
  <?=mk_option($cfg["Config"]["debug_level"], "8", "_(Command times)_");?>
  </select>&nbsp;_(Use only when directed for support)_.

:ud_settings_debug_level_plug:
> Setting a Debug Log Level adds additional logging in specific areas of UD for troubleshooting.  Set the Debug Log Level to debug a specific area of UD.
>
> Set to **None** to turn off debug logging.
>
> **Udev and Hotplug** udev, disk discovery and hotplug debug.
>
> **Refresh and Update** to find issues where UD hangs.
>
> **Command times** command execution times. **Warning:** very chatty.
>
> **Note:** Don't leave the Debug Log Level on for extended periods of time.  It can add a lot of log messages to the syslog.
:end

&nbsp;
: <input type="submit" value='_(Apply)_'><input type="button" value="_(Done)_" onclick="done()">
</form>

<div <?=$title_classid;?> class="nocontrol">_(SMB Settings)_</div>
<form markdown="1" name="smb_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#section" value="Config">
<input type="hidden" name="#file" value="unassigned.devices/unassigned.devices.cfg">
<input type="hidden" name="#command" value="/plugins/unassigned.devices/scripts/rc.settings">
<input type="hidden" name="#arg[1]" value="apply">

_(SMB Sharing)_:
: <select name="smb_security" size="1" onchange="prepareSecurity(this);">
  <?=mk_option($cfg["Config"]["smb_security"], "no", "_(Disabled)_");?>
  <?=mk_option($cfg["Config"]["smb_security"], "public", "_(Public)_");?>
  <?=mk_option($cfg["Config"]["smb_security"], "yes", "_(Private)_");?>
  <?=mk_option($cfg["Config"]["smb_security"], "hidden", "_(Private Hidden)_");?>
  </select>

:ud_settings_smb_security_plug:
> Set the user level of SMB Sharing.
>
> + Set to **Disabled** to disable SMB sharing.
> + Set to **Public** will share devices, Remote SMB/NFS shares, and iso Mounts Public with read and write access.
> + Set to **Private** to enable SMB Security on SMB shares. Set access by user to allow access and whether or not the user can write to the share.
> + Set to **Private Hidden** to enable SMB Security on SMB shares that will not be visible. Set access by user to allow access and whether or not the user can write to the share.
:end

<div id="smb_security" style="display: <?=($cfg['Config']["smb_security"] == "no" || $cfg['Config']["smb_security"] == "public" || (! $cfg['Config']["smb_security"]) ? "none" : "block");?>">
	<?php foreach ($users as $user): ?>
	<?php if ($user['name'] == "root"): continue; endif;?>
	<dl>
		<dt><?=$user['name'];?></dt>
		<dd>
			<select name="smb_<?=$user['name'];?>" size="1">
			<?=mk_option($cfg["Config"]["smb_{$user['name']}"] ?? '', "no-access", "_(No Access)_");?>
			<?=mk_option($cfg["Config"]["smb_{$user['name']}"] ?? '', "read-write", "_(Read/Write)_");?>
			<?=mk_option($cfg["Config"]["smb_{$user['name']}"] ?? '', "read-only", "_(Read-only)_");?>
			</select>
		</dd>
	</dl>
	<?php endforeach; ?>
</div>

_(Case-sensitive names)_:
: <select name="case_names" size="1">
  <?=mk_option($cfg["Config"]["case_names"], "auto", "_(Auto)_");?>
  <?=mk_option($cfg["Config"]["case_names"], "yes", "_(Yes)_");?>
  <?=mk_option($cfg["Config"]["case_names"], "force", "_(Force lower)_");?>
  </select>

:ud_settings_case_sensitive_plug:
> Controls whether filenames are case-sensitive.
>
> The default setting of **Auto** allows clients that support case sensitive filenames (Linux CIFSVFS) to tell the Samba server on a per-packet basis that they wish to access the file system in a case-sensitive manner (to support UNIX case sensitive semantics). No Windows system supports case-sensitive filenames so setting this option to auto is the same as setting it to No for them; however, the case of filenames passed by a Windows client will be preserved. This setting can result in reduced performance with very large directories because Samba must do a filename search and match on passed names.
>
> A setting of **Yes** means that files are created with the case that the client passes, and only accessible using this same case. This will speed very large directory access, but some Windows applications may not function properly with this setting. For example, if "MyFile" is created but a Windows app attempts to open "MYFILE" (which is permitted in Windows), it will not be found.
>
> A value of **Forced lower** is special: the case of all incoming client filenames, not just new filenames, will be set to lower-case. In other words, no matter what mixed case name is created on the Windows side, it will be stored and accessed in all lower-case. This ensures all Windows apps will properly find any file regardless of case, but case will not be preserved in folder listings.
:end

_(Add)_ 'force user = nobody' _(to SMB share config)_?
: <select name="force_user" size="1">
  <?=mk_option($cfg["Config"]["force_user"], "yes", "_(Yes)_");?>
  <?=mk_option($cfg["Config"]["force_user"], "no", "_(No)_");?>
  </select>

:ud_settings_force_user_plug:
> There are times when permissions on SMB shares aren't handled as expected. Turning this feature on can help with those permissions.
> This applies to all devices mounted with Unassigned Devices.
> The down side is that it overrides Linux group permissions. If you are unsure about whether or not this is necessary, leave it disabled.
:end

&nbsp;
: <input type="submit" value='_(Apply)_'><input type="button" value="_(Done)_" onclick="done()">
</form>

<div <?=$title_classid;?> class="nocontrol">_(NFS Settings)_</div>
<form markdown="1" name="nfs_settings" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#section" value="Config">
<input type="hidden" name="#file" value="<?=$paths['config_file']?>">
<input type="hidden" name="#command" value="/plugins/unassigned.devices/scripts/rc.settings">
<input type="hidden" name="#arg[1]" value="nfs_settings">

_(Enable NFS export)_?
: <select name="nfs_export" size="1" <?if ($var['shareNFSEnabled']=="no"):?>disabled<?endif;?>>
  <?=mk_option($cfg["Config"]["nfs_export"], "no", "_(No)_");?>
  <?=mk_option($cfg["Config"]["nfs_export"], "yes", "_(Yes)_");?>
  </select><?if ($var['shareNFSEnabled']=="no"):?>&nbsp;_(NFS must be enabled in Settings->NFS to enable NFS Export)_.<?endif;?>

<div id="nfs_security" style="display: <?=($cfg["Config"]["nfs_export"] == "no" ? "none" : "block");?>">
<dl>
	<dt>_(NFS Security)_:</dt>
	<dd>
		<select name="nfs_security" size="1" <?if ($var['shareNFSEnabled']=="no"):?>disabled<?endif;?>>
		<?=mk_option($cfg["Config"]["nfs_security"], "public", "_(Public)_");?>
		<?=mk_option($cfg["Config"]["nfs_security"], "private", "_(Private)_");?>
		</select>
	</dd>
</dl>

<div id="nfs_rule" style="display: <?=($cfg["Config"]["nfs_security"] == "public" ? "none" : "block");?>">
	<dl>
		<dt>_(Rules)_:</dt>
		<dd>
			<textarea spellcheck="false" cols="40" rows="5" name="new_nfs_rule" title='_(Enter NFS Rules)_.' style="width:45%"><?=$text;?></textarea>
		</dd>
	</dl>
	</div>
</div>

:ud_settings_nfs_shares_plug:
> Set to **Yes** to export NFS shares. Shares are exported Public with read and write access or Private with the rule you set. Access is controlled with permission settings on files and folders.
>
> **Note:** The normal rule used by UD is '*(sec=sys,rw,insecure,anongid=100,anonuid=99,all_squash)'.
:end

&nbsp;
: <input type="submit" value='_(Apply)_'><input type="button" value="_(Done)_" onclick="done()">
</form>

<div <?=$title_classid;?> class="nocontrol">_(Set Encrypted Disk Password)_</div>
<form markdown="1" name="set_pass" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#section" value="Config">
<input type="hidden" name="#file" value="<?=$paths['config_file']?>">
<input type="hidden" name="#command" value="/plugins/unassigned.devices/scripts/rc.settings">
<input type="hidden" name="#arg[1]" value="set_pass">

_(Select Disk)_:
: <select name="set_pass" size="1">

  <?foreach ($encrypt_devices as $d) {?>
  <?=mk_option($cfg["Config"]["pswd_serial"], ($d['label']), ($d['label']." (".basename($d['device']).")"))?>
  <?}?>
  </select>

_(Enter Disk Password)_:
: <input type="password" name="password" class="wide" maxlength="100" value="<?=$cfg["Config"]["password"];?>">
  
:ud_settings_disk_pass_plug:
> Select the disk that you want to set a Password. This is the password for this disk only and does not affect the array password/passphrase. Leave password blank to use the array password/passphrase for luks encrypted disks.
:end

&nbsp;
: <input type="submit" value='_(Set Password)_' title='_(Set the disk Password)_.' <?=count($encrypt_devices) ? "" : "disabled";?>>
</form>

<div <?=$title_classid;?> class="nocontrol">_(Change Disk UUID)_</div>
<form markdown="1" name="change_uuid" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#section" value="Config">
<input type="hidden" name="#file" value="<?=$paths['config_file']?>">
<input type="hidden" name="#command" value="/plugins/unassigned.devices/scripts/rc.settings">
<input type="hidden" name="#arg[1]" value="uuid_change">

_(Select Disk)_:
: <select name="change_uuid" size="1">
  <?foreach ($uuid_devices as $d) {?>
  <?=mk_option($cfg["Config"]["change_uuid"], ("(".$d['device'].") ".$d['label']), ($d['label']." (".basename($d['device']).")"));?>
  <?}?>
  </select>

:ud_settings_change_uuid_plug:
> Select the disk that you want to change the UUID. This is useful when a XFS formatted disk has been removed from the array and has the same UUID as an array disk. Drive must be unmounted to change the UUID.
>
> **Note:** Don't change the UUID of a pooled disk.
:end

&nbsp;
: <input type="submit" value='_(Change UUID)_' title='_(Change the disk UUID)_.' <?=count($uuid_devices) ? "" : "disabled";?>>
</form>
