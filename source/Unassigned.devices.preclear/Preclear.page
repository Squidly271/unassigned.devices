Menu="DiskUtilities"
Title="Preclear Disk"
Icon="unlink"
Tag="icon-preclear"
---
<?
/* Copyright 2015-2020, Guilherme Jardim
 * Copyright 2022-2024, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$preclear_plugin	= "unassigned.devices.preclear";
$docroot			= $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';

$Preclear			= new Preclear;
$zipFile			= sprintf("log/%s-%s-%s.zip", str_replace(' ','_',strtoupper($var['NAME'])), $preclear_plugin, date('Ymd-Hi') );

/* read translations */
parse_plugin('Preclear');

/* Get the version of Unraid we are running. */
$version = parse_ini_file("/etc/unraid-version");

/* Adjustments for 6.12 GUI changes. */
if (version_compare($version['version'], '6.12.0-beta5', '>')) {
	$title_div		= "div.title";
} else {
	$title_div		= "div#title";
}
?>
<link type="text/css" rel="stylesheet" href="<?autov("/plugins/dynamix.docker.manager/styles/style-$theme.css")?>">

<link type="text/css" rel="stylesheet" href="<?autov("/plugins/".$preclear_plugin."/assets/style-$theme.css")?>">
<link type="text/css" rel="stylesheet" href="<?autov("/plugins/".$preclear_plugin."/assets/preclear.css")?>">

<script>
	/* Function to clean up after downloading */
	function cleanUp() {
		if (document.hasFocus()) {
			/* If the document has focus, reset the button text and enable it */
			$('input[value="Downloading..."]').val('Download').prop('disabled', false);
        
			/* Send a POST request to delete the downloaded file */
			$.post('/webGui/include/Download.php', { cmd: 'delete', file: '<?=$zipFile;?>' });
		} else {
			/* If the document doesn't have focus, retry cleanup after 4000 milliseconds (4 seconds) */
			setTimeout(cleanUp, 4000);
		}
	}

	/* Function to initiate the download process */
	function getlog() {
		/* Set the button text to indicate downloading and disable it */
		$('input[value="Download"]').val('Downloading...').prop('disabled', true);
    
		/* Send a POST request to trigger the download process */
		$.post('/plugins/<?=$preclear_plugin;?>/Preclear.php', { action: 'download', file: '<?=$zipFile;?>' }, function (zip) {
			/* Redirect to the downloaded file */
			location = zip;
        
			/* Initiate cleanup after 4000 milliseconds (4 seconds) */
			setTimeout(cleanUp, 4000);
		});
	}

	/* Function to add a tooltip using Tooltipster */
	function addTooltip(target) {
		$(target).tooltipster({
			delay: 100,
			trigger: 'custom',
			triggerOpen: { mouseenter: true },
			triggerClose: { click: false, scroll: true, mouseleave: true }
		});
	}

	/* Function to modify the styling and behavior of preclear-related help elements */
	function preclearFixHelp() {
		$.each($("table.preclear"), function (i, v) {
			/* Disable cursor and unbind events for the first row and last dt element */
			$(this).find('tr:first, dt:last').css("cursor", "default").unbind();

			/* Get the ID of the inline help element */
			const help = $(this).next('.inline_help').attr("id");

			/* Bind click event to toggle visibility of inline help when clicking on certain cells */
			$.each($(this).find('tr:first > td, dt:last > dd').not(":first"), function (i, v) {
				$(this).css("cursor", "help").bind("click", function () {
					$("#" + help).toggle('slow');
				});
			});
		});
	}

	/* Set the content of div.spinner on page load */
	$(function() {
		/* Start the Unraid spinner. */
		unraidWaveTimer = setTimeout(function(){
			$('div.spinner.fixed').show();
		}, 500);

		/* Wait for the page to load. */
		window.onload = function() {
			/* Clear the spinner timer. */
			clearTimeout(unraidWaveTimer);

			/* Stop spinner after the page has loaded. */
			$('div.spinner.fixed').hide();
		};
	});

	/* Function to get a tab or title element by name */
	function get_tab_title_by_name(name) {
		/* Find the tab element by filtering input names and labels */
		const tab = $("input[name$=tabs] + label").filter(function() {
			return $(this).text() === name;
		}).prev();

		/* Find the title element by filtering the specified title_div */
		const title = $("<?=$title_div;?> > span.left").filter(function() {
			return $(this).text() === name;
		}).parent();

		/* Determine and return the appropriate element or default to the document */
		let result;

		if (tab.length) {
			result = tab;
		} else if (title.length) {
			result = title;
		} else {
			result = $(document);
		}

		return result;
	}

	/* Function to add a button to a tab */
	function addButtonTab(Button, Name, autoHide = true, Append = true) {
		/* Get the target tab or title element by name */
		const Target = get_tab_title_by_name(Name);
    
		/* Generate a unique ID for the new element */
		const elementId = 'event-' + new Date().getTime() * Math.floor(Math.random() * 100000);

		/* Create the new element with the provided button and styling */
		const element = $("<span id='" + elementId + "' class='status' style='padding-left:5px;'>" + Button + "</span>");

		/* Adjust styling for buttons inside the element */
		if (element.find("input[type='button']").length) {
			element.addClass("vhshift");
			element.find("input[type='button']").prop("style", "padding-top: 5px; padding-bottom: 5px; margin-top:-3px; margin-bottom:0;");
		}

		/* Check the type of the target element */
		let shouldReturn = false;

		if (Target.prop('nodeName') === "DIV") {
			element.addClass("vhshift");
			/* Append or prepend the new element based on the Append parameter */
			if (Append) {
				Target.append(element);
			} else {
				Target.prepend(element);
			}
		} else if (Target.prop('nodeName') === "INPUT") {
			element.css("display", "none");

			/* Append or prepend the new element based on the Append parameter */
			if (Append) {
				$('.tabs').append(element);
			} else {
				$('.tabs').prepend(element);
			}

			/* Bind click event to show the new element when the target is clicked */
			Target.bind({ click: function () { $('#' + elementId).fadeIn('slow'); } });

			/* Show the new element immediately if the target is checked or autoHide is disabled */
			if (Target.is(':checked') || !autoHide) {
				$('#' + elementId).fadeIn('slow');
			}

			/* Bind click events for hiding the new element when other tabs are clicked */
			$("input[name$=tabs]").each(function () {
				if (!$(this).is(Target) && autoHide) {
					$(this).bind({ click: function () { $('#' + elementId).fadeOut('slow'); } });
				}
			});
		} else {
			shouldReturn = true;
		}

		return shouldReturn;
	}

	/*
		Check if SweetAlert2 library (swal2) is undefined.
		If undefined, dynamically load the required stylesheets and scripts.
	*/
	if (typeof swal2 === "undefined") {
		/* Append the SweetAlert2 stylesheet to the head of the document. */
		$('head').append($('<link rel="stylesheet" type="text/css" />').attr('href', '<?autov("/plugins/".$plugin."/assets/sweetalert2.css");?>'));

		/* Load the SweetAlert2 script dynamically. */
		$.getScript('/plugins/<?=$plugin;?>/assets/sweetalert2.js');
	}

	/* Check for updated version and show banner if there is an update. */
	$(function() {
		if ( typeof caPluginUpdateCheck === "function" ) {
			caPluginUpdateCheck("unassigned.devices.preclear.plg");
		}
	});
</script>

<?=$Preclear->html();?>
<table class='preclear'>
	<thead>
		<tr>
		<td><?=_('Device')?></td>
		<td><?=_('Identification')?></td>
		<td><?=_('Temp')?>.</td>
		<td><?=_('Size')?></td>
		<td><?=_('Preclear Status')?></td>
		</tr>
	</thead>
	<tbody id="preclear-table-body">
		<tr>
			<td colspan='5'>
				<div class='spinner'></div>
			</td>
		</tr>
	</tbody>
</table>

:preclear_general_help_plug:
> The Unassigned Devices Preclear can be used to prepare disks for inclusion in the array, clear disks for disposal, and perform stress tests before disks are used in the array.
>
> Only disks that are not being used in the array and have no partitions with file systems will be listed as candidates for preclearing.
>
> When a disk is being precleared, you can follow the status on this page, on the Unassigned Devices page, or the preclear status icon in the footer of the Unraid web page.
> 
> There are multiple choices for preclearing:
>
> The **Enhanced** script authored by user **gfjardim** has the advantage that it supports the enhanced features like pause and resume preclearing.  It also has extensive logging.
>
> The **Docker** is the binhex Docker container that performs preclear.  The advantage of this is the preclearing is isolated in the Docker container.
>
> Preclear operations:
>
> + Clear Disk - The disk is cleared and the Unraid signature is written to the disk.  This will create an empty partition on the disk.
> + Erase Disk - Erase the entire disk by writing all zeros.  The preclear signature is removed.
> + Erase and Clear Disk - random patterns are written to the disk and then zeroes are written.  This is a good choice for a disk to be discarded to ensure all traces of files are removed.
> + Verify Signature - The disk signature is checked.
> + Verify Disk - The disk signature is checked and the disk is verified to be zeroed.
> + Post-read Verify - Perform a post read verify to check the disk.
> + Clear Signature - Remove the preclear signature from the disk.
>
> The text <em style='color:#00BE37;'>Precleared</em> next to the disk serial number indicates that the disk has a precleared signature.  This will only show when the disk is precleared and the Preclear Stats have been removed.
:end

<script>
	<?if (isset($_GET['disk']) && ! $Preclear->isRunning($_GET['disk']) ) echo "startDisk = '{$_GET[disk]}';";?>

	$(function(){
		addButtonTab('<a class="tooltip-toggle" style="cursor:pointer" onclick="getlog(this)" title="_(Download Logs)_"><i class="fa fa-download"></i></a>', "Preclear Disk");
		addButtonTab(' | ', "Preclear Disk");
		addButtonTab('<a class="tooltip-toggle" style="cursor:pointer" onclick="openPreclearLog();return false;" title="_(Preclear Log)_"><i class="fa fa-align-left"></i></a>', "Preclear Disk");
		addButtonTab(' | ', "Preclear Disk");
		addButtonTab('<a class="tooltip-toggle" style="cursor:pointer;" onclick="preclearClear()" title="_(Fix Preclear)_"><i class="fa fa-refresh"></i></a>', "Preclear Disk");
		addButtonTab( '| ', "Preclear Disk");
		addButtonTab('<a class="tooltip-toggle preclear-queue" style="cursor:pointer" onclick="setPreclearQueue();" title="_(Set Preclear Queue)_"><i class="fa fa-list-ol"></i></a>', "Preclear Disk");
		addButtonTab(' | ', "Preclear Disk");
		addButtonTab('<a class="tooltip-toggle" style="cursor:pointer;" onclick="preclearResumeAll()" title="_(Resume all Sessions)_"><i class="fa fa-play green-text"></i></a>', "Preclear Disk");
		addButtonTab('<a class="tooltip-toggle" style="cursor:pointer;" onclick="preclearPauseAll()" title="_(Pause all Sessions)_"><i class="fa fa-pause yellow-orb"></i></a>', "Preclear Disk");
		addButtonTab('<a class="tooltip-toggle" style="cursor:pointer;" onclick="preclearStopAll()" title="_(Stop all Sessions)_"><i class="fa fa-stop red-text"></i></a>', "Preclear Disk");
		addButtonTab(' | ', "Preclear Disk");
		addButtonTab('<a class="tooltip-toggle" style="cursor:pointer" onclick="startPreclear(\'\', \'yes\');" title="_(Start Multiple Sessions)_"><i class="fa fa-toggle-right"></i></a>', "Preclear Disk");

		setTimeout(preclearFixHelp,100);
	});
</script>
